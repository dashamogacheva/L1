// Aналог библиотеки Math
const MathX = {
// 1 вариант вычисления N-го числа в ряду Фибоначчи
    numbersInFibonacci(n) {
        let a = 1; // задаем первые 2 числа в цепочке фибоначчи, равные 1
        let b = 1;
        if (n < 0) {  // проверка, если число отрицательное - вывод ошибки
            return "Число некорректное. Попробуйте еще раз.";
        }
        if (n === 0) { // если число n равно 0, возвращаем его
            return 0;
        }
        for (let i = 3; i <= n; i++) {  // в цикле проходимся по всем числам последовательности, начиная от 3 элемента до числа n, включительно
            let c = a + b; // переменной с присваиваем сумму a и b - предыдущих чисел ряда
            a = b;  // а присваиваем число b, а числу b присваиваем число с, таким образом делая шаг по ряду фибоначчи для дальнейших вычислений
            b = c;
        }
        return b; // возвращаем N-е число b
    },
// 2 вариант вычисления N-го числа в ряду Фибоначчи через рекурсию
    numbersInFib(n) {
        if (n < 0) {  // проверка, если число отрицательное - вывод ошибки
            return "Число некорректное. Попробуйте еще раз.";
        }
        if (n === 0) { // если число n равно 0, возвращаем его
            return 0;
        }
        if (n === 1 || n === 2) { // если число n равно 1 или 2, возвращаем 1
            return 1;
        }
        return this.numbersInFib(n - 1) + this.numbersInFib(n - 2); // возвращаем число, высчитываемое при помощи рекурсии по формуле нахождения н-ого числа фибоначчи F(n) = F(n-1) + F(n-2)
    },

// вычисление всех чисел в ряду Фибоначчи до числа N
    allFibNumbersUpTo(n) {
        let a = 1; // задаем первые 2 числа в цепочке фибоначчи, равные 1
        let b = 1;
        let fibArray = [0, a, b]; // массив, куда будет сохраняться ряд
        if (n < 0) {  // проверка, если число отрицательное - вывод ошибки
            return "Число некорректное. Попробуйте еще раз.";
        }
        if (n === 0) { // если n = 0, вывод 0
            return 0;
        }
        if (n === 1) { // если n = 1, вывод [0, 1]
            return [0, 1];
        }
        if (n === 2) { // если n = 2, вывод fibArray, равный [0, 1, 1]
            return fibArray;
        }
        for (let i = 3; i <= n; i++) {  // в цикле проходимся по всем числам последовательности, начиная от 3 элемента до числа n, включительно
            let c = a + b; // переменной с присваиваем сумму a и b - предыдущих чисел ряда
            fibArray.push(c); // вставляем в конец массива fibArray, получившееся число с
            a = b; // а присваиваем число b, а числу b присваиваем число с, таким образом делая шаг по ряду фибоначчи для дальнейших вычислений
            b = c;
        }
        return fibArray; // возвращаем массив с получившимся рядом фибоначчи до N-го числа
    },

// вычисление N-го просто числа
    nPrimeNumber(n) {
        let count = 0;  // создаем переменную счетчик, чтобы сравнивать ее в дальнейшем с входящей переменной n
        if (n < 1) {  // проверка если число меньше 1 - ошибка
            return 'Число некорректное. Попробуйте еще раз.';
        }
        for (let value = 2; ; value++) { // циклом без условия проходим по ряду цифр, начиная от 2, тк 2 - первое простое число
            if (this.isPrime(value)) {  // вызываем функцию проверки, является ли число value простым и если да, то увеличиваем счетчик на 1
                count++;
            }
            if (n === count) { // если значение счетчика равно входящей переменной n, возвращаем текущий value - N-е простое число
                return value;
            }
        }
    },

// проверка является ли число простым
    isPrime(value) {
        if (value < 2) { // если value меньше 2, то возвращаем false, тк меньше 2 числа простыми не могут быть
            return false;
        }
        if (value === 2) { // если value равно 2, возвращаем true, тк 2 - единственное четное простое число
            return true;
        }
        for (let i = 2; i < value; i++) { // циклом проходимся до значения value, начиная с 2
            if (value % i === 0) { // делим value на каждое значение i, если делится без остатка - возвращаем false - число не является простым
                return false;
            }
        }
        return true; // если все проверки были пройдены успешно - возвращаем true - число простое
    },

// вычисление всех простых чисел до числа N
    allPrimeNumbersUpToN(n) {
        let primeNumbersArray = []; // создаем массив, где будем хранить цепочку простых чисел до N
        if (n < 1) { // если N меньше 1 - вывод ошибки
            return 'Число некорректное. Попробуйте еще раз.';
        }
        for (let i = 1; i <= n; i++) { // циклом проходим по всем числам от 1 до N включительно
            if (this.isPrime(i)) { // если число i является простым - вставляем его в конец массива primeNumbersArray
                primeNumbersArray.push(i);
            }
        }
        return primeNumbersArray; // вывод готового массива
    },

}

console.log(MathX.numbersInFibonacci(0)); // 0 - тест 1 вариант вычисления N-го числа в ряду Фибоначчи
console.log(MathX.numbersInFibonacci(7)); // 13
console.log(MathX.numbersInFibonacci(77)); // 5527939700884757
console.log(MathX.numbersInFibonacci(10)); // 55
console.log('------------------------');
console.log(MathX.numbersInFib(0)); // 0 - тест 2 варианта вычисления N-го числа в ряду Фибоначчи
console.log(MathX.numbersInFib(7)); // 13
console.log(MathX.numbersInFib(2)); // 1
console.log(MathX.numbersInFib(10)); // 55
console.log('------------------------');
console.log(MathX.allFibNumbersUpTo(7)); // [ 0, 1, 1, 2, 3, 5, 8, 13 ]
console.log(MathX.allFibNumbersUpTo(10)); // [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ]
console.log('------------------------');
console.log(MathX.nPrimeNumber(5)); // 11
console.log(MathX.nPrimeNumber(11)); // 31
console.log(MathX.nPrimeNumber(9)); // 23
console.log(MathX.nPrimeNumber(3)); // 5
console.log('------------------------');
console.log(MathX.allPrimeNumbersUpToN(5)); // [ 2, 3, 5 ]
console.log(MathX.allPrimeNumbersUpToN(11)); // [ 2, 3, 5, 7, 11 ]
console.log(MathX.allPrimeNumbersUpToN(9)); // [ 2, 3, 5, 7 ]
console.log(MathX.allPrimeNumbersUpToN(3)); // [ 2, 3 ]